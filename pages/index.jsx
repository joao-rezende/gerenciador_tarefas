import Head from 'next/head'
import { useEffect, useReducer, useState } from 'react'
import styles from '../styles/Home.module.css'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faPlus, faCircleNotch, faTimes } from '@fortawesome/free-solid-svg-icons'
import Task from '../components/Task'

export default function Home() {
  const listReducer = (state, action) => {
    switch (action.type) {
      case 'update':
        return action.value;
      case 'remove':
        return state.filter((item) => item.key != action.id);
      default:
        throw new Error();
    }
  };

  // const [listTasks, setListTasks] = useState([]);
  const [listTasks, dispatchList] = useReducer(listReducer, []);
  const [apiError, setApiError] = useState(null);
  const [isLoaded, setIsLoaded] = useState(false);

  function removeTask(id) {
    dispatchList({ type: 'remove', id });
  }

  useEffect(() => {
    fetch("/api/tasks")
      .then(res => res.json())
      .then(
        (data) => {
          setIsLoaded(true);
          dispatchList({
            type: 'update',
            value: data.map(
              (task, index) => (<Task task={task} id={index} key={index} onRemove={removeTask} />)
            )
          });
        },
        (error) => {
          setApiError(error);
          setIsLoaded(true);
        }
      )
  }, [isLoaded]);

  function addTask() {
    const lastTask = listTasks[listTasks.length - 1];
    const key = lastTask ? (lastTask.key + 1) : 0;
    dispatchList({
      type: 'update',
      value: listTasks.concat(<Task id={key} key={key} onRemove={removeTask} />)
    });
  }

  if (apiError) {
    return (
      <div className={styles.container}>
        <div className={styles.error}>
          <FontAwesomeIcon icon={faTimes} />
          <p>
            Falha ao carregar <br />
            as tarefas
          </p>
        </div>
      </div>
    )
  }

  if (!isLoaded) {
    return (
      <div className={styles.container}>
        <div className={styles.loading}>
          <FontAwesomeIcon icon={faCircleNotch} spin={true} style={{ animationDuration: "1.4s" }} />
          <p>Carregando</p>
        </div>
      </div>
    )
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Tarefas</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          <span>Tarefas</span>
          <button className={styles.addButton} onClick={addTask} type="button">
            <FontAwesomeIcon icon={faPlus} />
          </button>
        </h1>

        <div id="tasks" className={styles.grid}>
          {listTasks}
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer" >
          Feito por&nbsp;<strong>Jo√£o Vitor e Pedro Henrique</strong>
        </a>
      </footer>
    </div>
  )
}
